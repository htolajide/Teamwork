
let cloudinary = require('cloudinary').v2;
import debug from 'debug';
import pool from '../database/dbconnect';
// configure cloudinary
cloudinary.config({
  cloud_name: 'ds5hogj9b',
  api_key: '657785678132187',
  api_secret: 'EcvkztYhPW8egTvRTo10OdiJpwU'
});


export default {
  create: async (req, res) => {
    // check if user is admin
    const { token, userid } = req.cookies;
    const {product_name, imageurl, price} = req.body;
    // token = req.header();
    try {
      // Upload image to cloudinary
      await cloudinary.uploader.upload(imageurl, { tags: 'basic_sample', "width": 200, "height": 150,  })
      .then(function (image) {
      console.log();
      console.log("** File Upload (Promise)");
      console.log("* public_id for the uploaded image is generated by Cloudinary's service.");
      console.log("* " + image.public_id);
      console.log("* " + image.url);
      // create trip if user is admin
      pool.query('INSERT INTO product (product_name, trader_id, imageurl, price) VALUES ($1, $2, $3, $4) RETURNING id, imageurl, product_name, price, created_at ', [product_name, userid, image.url, price], (err, result) => {
        if (!err) {
          return res.jsend.success({
            productID: result.rows[0].id,
            message: 'Product successfully posted',
            CreatedOn: result.rows[0].created_at,
            name: result.rows[0].title,
            imageUrl: result.rows[0].imageurl
          });
        }
          return res.jsend.error(err);
      });
    // disconnect client
    pool.on('remove', () => {
        debug('app:*')('Client Removed @ postGif');
      });
    })
    .catch(function (err) {
      console.log();
      console.log("** File Upload (Promise)");
      if (err) { debug('app:*')('Error Occured: Something wrong @uploadProduct' + err); }
    });
  }catch (error) { debug('app:*')('Error Occured: Something wrong @uploadProduct'); }   
},
  // user delete product
   delete: async (req, res) => {
    const { token, userid } = req.cookies;
    const { params: { productId } } = req;
    // token = req.header();
    try {
        pool.query('DELETE FROM  product  WHERE id = $1 AND trader_id = $2 RETURNING id, product_name', [productId, userid], (err, result) => {
          if(result === undefined){ return res.jsend.error("Delete product failed");}
          if (!err) {
            return res.jsend.success({
              message: 'Product succesfully deleted ',
              name: result.rows[0].product_name
            });
          } 
          return res.jsend.error(err);
        });
    } catch (error) { debug('app:*')('Error Occured: Something wrong @deleteGif ' + error); }
    // disconnect client
    pool.on('remove', () => {
      debug('app:*')('Client Removed @deleteGif');
    }); 
  },
  // Get specific product
  getOne: async (req, res) => {
    const { params: { productId } } = req;
    try {
      pool.query('SELECT product.id as pid, product_name, imageurl, price, created_at, trader.name as maker, phone, address FROM product JOIN trader ON trader.id = product.trader_id WHERE product.id = $1', [productId], (error, result) => {
        if(error){ return res.jsend.error("This product is not available"); }
        if(!error){
            return res.jsend.success({
                id: result.rows[0].pid,
                createdOn: result.rows[0].gifdate,
                product_name: result.rows[0].product_name,
                url: result.rows[0].imageurl,
                price: result.rows[0].price,
                trader: result.rows[0].maker,
                phone: result.rows[0].phone,
                address: result.rows[0].address,
            });
          }
        return res.jsend.error(error);  
      });
    } catch (error) { debug('app:*')('Error Occured: Something wrong getting product'); }
    // disconnect client
    pool.on('remove', () => {
      debug('app:*')('Client Removed @gettingProduct');
    });
  },

  // Get specific product
  getAll: async (req, res) => {
    const { params: { productId } } = req;
    try {
      pool.query('SELECT id, product_name, imageurl, price, created_at FROM product ', (error, result) => {
          if(!error){
            if(result === undefined){ return res.jsend.error("Products are not available"); }
            return res.jsend.success({
                products: result.rows,
            });
          }
        return res.jsend.error(error);  
      });
    } catch (error) { debug('app:*')('Error Occured: Something wrong getting producs'); }
    // disconnect client
    pool.on('remove', () => {
      debug('app:*')('Client Removed @gettingProducts');
    });
  },
};
